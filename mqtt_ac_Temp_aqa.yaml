blueprint:
  name: Intelligent AC Control
  description: Control AC via external sensor
  domain: automation
  author: Fahad (SixDegrees)
#aqara
  input:
    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature

    climate_device:
      name: Climate Device
      selector:
        entity:
          domain: climate

    target_temperature:
      name: Target Temperature
      default: 24
      selector:
        number:
          min: 16
          max: 30
          unit_of_measurement: "°C"
          mode: slider
          step: 0.5

    margin:
      name: Margin
      default: 0.7
      selector:
        number:
          min: 0.2
          max: 2
          step: 0.1
          unit_of_measurement: "°C"

    cooldown_time:
      name: Cooldown (sec)
      default: 180
      selector:
        number:
          min: 30
          max: 600
          step: 15
          unit_of_measurement: "seconds"

mode: restart

trigger:
  - platform: state
    entity_id: !input temperature_sensor
  - platform: time_pattern
    minutes: "/1"

condition:
  - condition: template
    value_template: >
      states('!input.temperature_sensor') not in ['unknown', 'unavailable']

action:
  - variables:
      current_temp: "{{ states(input.temperature_sensor) | float }}"
      target_temp: "{{ input.target_temperature | float }}"
      margin: "{{ input.margin | float }}"
      ac_state: "{{ state_attr(input.climate_device, 'hvac_action') }}"
      cooldown: "{{ input.cooldown_time | int }}"
      last_changed: >
        {{ (as_timestamp(now()) - as_timestamp(state_attr(this.entity_id, 'last_triggered') or 0)) | int }}

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ current_temp > (target_temp + margin)
                 and (ac_state != 'cooling')
                 and (last_changed > cooldown) }}
        sequence:
          - service: climate.turn_on
            target:
              entity_id: !input climate_device
          - service: climate.set_temperature
            data:
              temperature: "{{ target_temp }}"
            target:
              entity_id: !input climate_device

      - conditions:
          - condition: template
            value_template: >
              {{ current_temp < (target_temp - margin)
                 and (ac_state != 'off')
                 and (last_changed > cooldown) }}
        sequence:
          - service: climate.turn_off
            target:
              entity_id: !input climate_device
